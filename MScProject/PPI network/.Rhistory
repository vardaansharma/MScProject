library(igraph)
library(ggplot2)
library(readr)
all_proteins <- read_csv("C:/Users/homoe/OneDrive - University of Edinburgh/PROJECT/MScProject/Networks/Combined.csv")
View(all_proteins)
library(igraph)
library(ggplot2)
PPI_List <- read_csv("C:/Users/homoe/OneDrive - University of Edinburgh/PROJECT/MScProject/Networks/PPI_List.csv")
View(PPI_List)
PPI_List_Unique <- read_csv("C:/Users/homoe/OneDrive - University of Edinburgh/PROJECT/MScProject/Networks/PPI_List_Unique.csv")
View(PPI_List_Unique)
nrow(PPI_List)
nrow(PPI_List_Unique)
NROW(PPI_List_Unique)
agg <- function(.x)toString(unique(.x))
graph_all <- graph_from_data_frame(PPI_List,directed = FALSE)
vcount(graph_all)
simplified_graph_all <- (graph_all, remove.multiple = TRUE, remove.loops = TRUE, edge.attr.comb = agg)
simplified_graph_all <- simplify(graph_all, remove.multiple = TRUE, remove.loops = TRUE, edge.attr.comb = agg)
simplified_graph_all
ecount(simplified_graph_all)
ecount(graph_all)
plot(simplified_graph_all, vertex.label=NA, edge.arrow.mode=0,layout=layout_components())
plot(simplified_graph_all, vertex.label=NA, edge.arrow.mode=0,layout=layout_components
)
plot(simplified_graph_all,vertex.size=5, vertex.label=NA, edge.arrow.mode=0,layout=layout_components)
plot(simplified_graph_all,vertex.size=5, vertex.label=NA, edge.arrow.mode=0,layout=layout_nicely)
comps <- components(simplified_graph_all)
max(comp$no)
max(comps$no)
qplot(comps$csize,bins=1000)
qplot(comps$csize,bins=100)
qplot(comps$csize,bins=10)
qplot(comps$csize,bins=1)
qplot(comps$csize,bins=10)
qplot(comps$csize,bins=100)
qplot(comps$csize,bins=1)
qplot(comps$csize,bins=100,log='x')
comps
max(comp$no)
max(comps$no)
qplot(comps$csize,bins=1000,log='x')
qplot(comps$csize,bins=10,log='x')
qplot(comps$csize,bins=20,log='x')
comps$no
i <- which.max(comp$size)
i <- which.max(comps$size)
i
comps$csize
i <- which.max(comps$csize)
i
vg <- groups(comps)
csimplified_graph_all <- induced.subgraph(simplified_graph_all, vg[[i]])
csimplified_graph_all
plot(csimplified_graph_all,vertex.size=5, vertex.label=NA, edge.arrow.mode=0,layout=layout_nicely)
library(igraph)
library(ggplot2)
plot(csimplified_graph_all,vertex.size=5, vertex.label=NA, edge.arrow.mode=0,layout=layout_nicely)
plot(csimplified_graph_all,vertex.size=5, vertex.label=NA, edge.arrow.mode=0,layout=layout_nicely)
plot(csimplified_graph_all,vertex.size=5, vertex.label=NA, edge.arrow.mode=0,layout=layout_with_mds)
library(igrpah)
library(igraph)
d <- igraph::degree(csimplified_graph_all)
maxd <- which.max(d)
maxd
v(csimplified_graph_all)[maxd]
V(csimplified_graph_all)[maxd]
dd <- degree_distribution(csimplified_graph_all)
xx <- 1:length(dd)-1
ind <- which(dd>0)
dd <- dd[ind]
xx <- xx[ind]
qplot(Xx,dd,log='xy')
library(ggplot2)
qplot(Xx,dd,log='xy')
qplot(xx,dd,log='xy')
fit1 <- fit_power_law(d)
fit1
plot(csimplified_graph_all,vertex.size=5, vertex.label=NA, edge.arrow.mode=0,layout=layout_with_mds)
library(ggplot2)
library(igraph)
library(readr)
PPI_List <- read_csv("C:/Users/homoe/OneDrive - University of Edinburgh/PROJECT/MScProject/Networks/PPI_List.csv")
View(PPI_List)
typeof(PPI_List)
typeof(PPI_List_Unique)
graph_all <- graph_from_data_frame(PPI_List,directed = FALSE)
typeof(graph_all)
head(PPI_List)
NROW(graph_all)
vcount(graph_all)
ecount(graph_all)
plot(csimplified_graph_all,vertex.size=5, vertex.label=NA, edge.arrow.mode=0,layout=layout_with_mds)
plot(graph_all,vertex.size=5, vertex.label=NA, edge.arrow.mode=0,layout=layout_nicely)
graph_all
View(graph_all)
plot(graph_all,vertex.size=5, vertex.label=NA, edge.arrow.mode=0,layout=layout_nicely)
library(ggplot2)
plot(graph_all,vertex.size=5, vertex.label=NA, edge.arrow.mode=0,layout=layout_nicely)
library(igraph)
plot(graph_all,vertex.size=5, vertex.label=NA, edge.arrow.mode=0,layout=layout_nicely)
plot(graph,vertex.size=5, vertex.label=NA, edge.arrow.mode=0,layout=layout_nicely)
#simplifying the graph ( removeing duplicates etc)/
agg <- function(.x)toString(unique(.x))
#simplifying the graph ( removeing duplicates etc)/
agg <- function(.x)toString(unique(.x))
#simplifying the graph ( removeing duplicates etc)/
agg <- function(.x)toString(unique(.x))
sgraph <- simplified(graph,remove.multiple=TRUE,remove.loops=TRUE,edge.attr.comb=agg)
simplified_graph_all <- simplify(graph_all, remove.multiple = TRUE, remove.loops = TRUE, edge.attr.comb = agg)
sgraph <- simplify(graph,remove.multiple=TRUE,remove.loops=TRUE,edge.attr.comb=agg)
sgraph <- simplify(graph_all,remove.multiple=TRUE,remove.loops=TRUE,edge.attr.comb=agg)
sgraph <- simplify(graph,remove.multiple=TRUE,remove.loops=TRUE,edge.attr.comb=agg)
library(readr)
library(igraph)
library(ggplot2)
all_proteins <- read_csv("C:/Users/homoe/OneDrive - University of Edinburgh/PROJECT/MScProject/Networks/Combined.csv")
PPI_List_Unique <- read_csv("C:/Users/homoe/OneDrive - University of Edinburgh/PROJECT/MScProject/Networks/PPI_List_Unique.csv")
PPI_List <- read_csv("C:/Users/homoe/OneDrive - University of Edinburgh/PROJECT/MScProject/Networks/PPI_List.csv")
graph <- graph_from_data_frame(PPI_List,directed=FALSE)
plot(graph,vertex.size=5, vertex.label=NA, edge.arrow.mode=0,layout=layout_nicely)
#simplifying the graph ( removeing duplicates etc)/
agg <- function(.x)toString(unique(.x))
sgraph <- simplify(graph,remove.multiple=TRUE,remove.loops=TRUE,edge.attr.comb=agg)
#checking the components (subgraphs)
comps <- components(sgraph)
#taking only biggest subgraph
i <- which.max(comps$csize)
vg <- groups(comps)
csgraph <- induced.subgraph(sgraph,vg[[i]])
plot(csgraph,vertex.size=5, vertex.label=NA, edge.arrow.mode=0,layout=layout_nicely)
ecount(csgraph)
vcount(csgraph)
c(vcount(csgraph), max(comps$csize))
write_graph(csgraph,"C:/Users/homoe/OneDrive - University of Edinburgh/PROJECT/MScProject/Networks/biggestcomp.csv","edgelist")
write_graph(csgraph,"C:/Users/homoe/OneDrive - University of Edinburgh/PROJECT/MScProject/Networks/biggestcomp.csv","lgl")
write_graph(csgraph,"C:/Users/homoe/OneDrive - University of Edinburgh/PROJECT/MScProject/Networks/biggestcomp.csv","lgl")
write_graph(csgraph,"C:/Users/homoe/OneDrive - University of Edinburgh/PROJECT/MScProject/Networks/biggestcomp.csv","dimacs")
write_graph(csgraph,"C:/Users/homoe/OneDrive - University of Edinburgh/PROJECT/MScProject/Networks/biggestcomp.csv","graphml")
write_graph(csgraph,"C:/Users/homoe/OneDrive - University of Edinburgh/PROJECT/MScProject/Networks/biggestcomp.csv","ncol")
idd = <- match("273",V(csgraph)$name)
idd  <- match("273",V(csgraph)$name)
E(csgraph) [ from(idd)]
idd  <- match("1759",V(csgraph)$name)
E(csgraph) [ from(idd)]
#Degree
degrees <- igraph::degree(csgraph)
max_degree <- which.max(degrees)
degrees
typeof(degrees)
type(degrees)
max_degree
typeof(max_degree)
degrees
type(degrees)
typeof(max_degree)
typeof(degrees)
degrees[1]
max_degree
summary(degrees)
V(csgraph)[max_degree]
library(igraph)
V(csgraph)[max_degree]
degrees[1]
summary(degrees)
degrees[1]
max_degree
capture.output(degrees, file = 'C:/Users/homoe/OneDrive - University of Edinburgh/PROJECT/MScProject/Networks/degrees.csv')
capture.output(summary(degrees), file = 'C:/Users/homoe/OneDrive - University of Edinburgh/PROJECT/MScProject/Networks/degrees.csv')
write.table(degrees,'C:/Users/homoe/OneDrive - University of Edinburgh/PROJECT/MScProject/Networks/degrees.csv')
max_degree
V(csgraph)[27]
degrees[27]
write.table(degrees,'C:/Users/homoe/OneDrive - University of Edinburgh/PROJECT/MScProject/Networks/degrees.csv',sep = ',')
#Scale free network
deg_dist <- degree_distribution(csgraph)
xx <- 1:length(deg_dist) -1
ind <- which(deg_dist > 0)
deg_dist <- deg_dist[ind]
xx <- xx[ind]
qplot(xx, deg_dist, log='xy')
library(ggplot2)
qplot(xx, deg_dist, log='xy')
ggsave('C:/Users/homoe/OneDrive - University of Edinburgh/PROJECT/MScProject/Networks/scale_free_graph.pdf')
ggsave('C:/Users/homoe/OneDrive - University of Edinburgh/PROJECT/MScProject/supplimentary/scale_free_graph.pdf')
ggsave('C:/Users/homoe/OneDrive - University of Edinburgh/PROJECT/MScProject/supplimentary/scale_free_graph.pdf')
qplot(xx, deg_dist, log='xy', ylab='number of proteins')
qplot(xx, deg_dist, log='xy', xlab='number of proteins')
qplot(xx, deg_dist, log='xy', xlab='number of proteins')
ggsave('C:/Users/homoe/OneDrive - University of Edinburgh/PROJECT/MScProject/supplimentary/scale_free_graph.pdf')
ggsave('C:/Users/homoe/OneDrive - University of Edinburgh/PROJECT/MScProject/supplimentary/scale_free_graph.pdf')
write.table(degrees,'C:/Users/homoe/OneDrive - University of Edinburgh/PROJECT/MScProject/Supplimentary/degrees.csv',sep = ',')
fit1 <- fit_power_law(degrees)
fit1
#centrality / closeness
closns <- closeness(csgraph)
max_closns <- which.max(closns)
#qplot(closns)
summary(closns)
qplot(closns)
#path length
distances(csgraph, v=max_degree) -> path_dists
qplot(path_dists[1,], binwidth=0.5)
#table( path_dists )
summary(path_dists[1])
qplot(path_dists[1,], binwidth=1)
qplot(path_dists[1,], binwidth=0.25)
qplot(path_dists[1,], binwidth=0.5,xlab = 'path distances',ylab='number of proteins')
qplot(path_dists[1,], binwidth=0.25,xlab = 'path distances',ylab='number of proteins')
ggsave('C:/Users/homoe/OneDrive - University of Edinburgh/PROJECT/MScProject/supplimentary/path_distances.pdf')
#centrality / closeness
closns <- closeness(csgraph)
max_closns <- which.max(closns)
qplot(closns)
summary(closns)
ggsave('C:/Users/homoe/OneDrive - University of Edinburgh/PROJECT/MScProject/supplimentary/closeness.pdf')
ggsave('C:/Users/homoe/OneDrive - University of Edinburgh/PROJECT/MScProject/supplimentary/closeness.pdf', xlab='closeness')
qplot(closns,xlab='closeness')
summary(closns)
ggsave('C:/Users/homoe/OneDrive - University of Edinburgh/PROJECT/MScProject/supplimentary/closeness.pdf')
#betweenness
betwness <- betweenness(csgraph, directed = FALSE)
qplot(betwness, log = 'x')
qplot(betwness, log = 'x',xlab='betweenness')
ggsave('C:/Users/homoe/OneDrive - University of Edinburgh/PROJECT/MScProject/supplimentary/betweenness.pdf')
#cluster coefficient / transivity
trans <- transitivity(csgraph, type='local',vids=V(csgraph))
qplot(trans,xlab='transitivity')
summary(trans)
#assortativity degree
assortativity_degree(csgraph,directed = FALSE)
#page rank
pagerank <- page_rank(csgraph,directed = FALSE)$vector
qplot(pagerank,log='x')
summary(pagerank)
pprm <- which(E(csgraph)$type!='pp')
pprm
ebcl <- cluster_edge_betweenness(csgraph)
ebcl
eb.comm.graph <- contract.vertices(csgraph,ebcl$membership,vertex.attr.comb = list(size="sum","ignore"))
plt(eb.comm.graph,vertex.size=5,vertex.label=NA,layout=layout.fruchterman.reingold
)
plot(eb.comm.graph,vertex.size=5,vertex.label=NA,layout=layout.fruchterman.reingold)
plot(eb.comm.graph,vertex.size=5,vertex.label=NA,layout=layout.fruchterman.reingold)
cg <- delete_edges(csgraph, which(crossing(ebcl,csgraph)))
l <- layout_nicely(cg)
plot(ebcl,csgraph,vertex.size=3,vertex.label=NA,layout=l,edge.color = c("black","gray")[crossing(ebcl,csgraph) + 1])
ggsave('C:/Users/homoe/OneDrive - University of Edinburgh/PROJECT/MScProject/supplimentary/clustered.pdf')
typeof(sgraoh)
typeof(sgraph)
typeof(graph)
library(igraph)
typeof(graph)
vcount(sgraph)
ecount(sgraph)
vcount(csgraph)
ecount(csgraph)
fit1
degrees
fit1
all_proteins <- read_csv("C:/Users/homoe/OneDrive - University of Edinburgh/PROJECT/MScProject/Networks/Combined.csv")
library(readr)
library(igraph)
library(ggplot2)
all_proteins <- read_csv("C:/Users/homoe/OneDrive - University of Edinburgh/PROJECT/MScProject/Networks/Combined.csv")
PPI_List_Unique <- read_csv("C:/Users/homoe/OneDrive - University of Edinburgh/PROJECT/MScProject/Networks/PPI_List_Unique.csv")
PPI_List <- read_csv("C:/Users/homoe/OneDrive - University of Edinburgh/PROJECT/MScProject/Networks/PPI_List.csv")
graph <- graph_from_data_frame(PPI_List,directed=FALSE)
plot(graph,vertex.size=5, vertex.label=NA, edge.arrow.mode=0,layout=layout_nicely)
#simplifying the graph ( removeing duplicates etc)/
agg <- function(.x)toString(unique(.x))
sgraph <- simplify(graph,remove.multiple=TRUE,remove.loops=TRUE,edge.attr.comb=agg)
#checking the components (subgraphs)
comps <- components(sgraph)
#taking only biggest subgraph
i <- which.max(comps$csize)``
vg <- groups(comps)
csgraph <- induced_subgraph(sgraph,vg[[i]])
c(vcount(csgraph), max(comps$csize)) #making sure we got the biggest one by looking at vertice count
#Degree
degrees <- igraph::degree(csgraph)
max_degree <- which.max(degrees)
write.table(degrees,'C:/Users/homoe/OneDrive - University of Edinburgh/PROJECT/MScProject/Supplimentary/degrees.csv',sep = ',')
#Scale free network
deg_dist <- degree_distribution(csgraph)
xx <- 1:length(deg_dist) -1
ind <- which(deg_dist > 0)
deg_dist <- deg_dist[ind]
xx <- xx[ind]
qplot(xx, deg_dist, log='xy', xlab='number of proteins')
ggsave('C:/Users/homoe/OneDrive - University of Edinburgh/PROJECT/MScProject/supplimentary/scale_free_graph.pdf')
fit1 <- fit_power_law(degrees)
fit1
scalefreeprops <- networkProperties(csgraph)
fit2 <- fit_power_law(sgraph)
fit2 <- fit_power_law(csgraph)
degrees2 <- igraph::degree(sgraph)
fit2 <- fit_power_law(degrees2)
fit2
fit1
vxount(sgraph)
vcount(sgraph)
ecount(sgraph)
vcount(csgraph)
ecount(csgraph)
graph
csgraph
degrees3 <- igraph::degree(graph)
fit3 <- fit_power_law(degrees3)
fit3
fit1
library("poweRlaw")
data("moby", package="poweRlaw")
moby_displ = displ$new(moby)
moby_displ
degree_displ = displ$new(degrees)
degree_displ
est = estimate_xmin(degree_displ)
est
est
checking = bootstrap_p(degree_displ)
checking$p
plot(checking)
fit1
degree_displ$setXmin(est)
bs = bootstrap(degree_displ, no_of_sims = 5000, threads = 2)
bs
bs$bootstraps[,3]
mean(bs$bootstraps[,3])
qplot(xx, deg_dist, log='xy', xlab='degree', ylab='distribution/fraction of nodes')
ggsave('C:/Users/homoe/OneDrive - University of Edinburgh/PROJECT/MScProject/supplimentary/scale_free_graph.pdf')
checking$p
checking = bootstrap_p(degree_displ)
library(poweRlaw)
degree_displ$setXmin(est)
checking = bootstrap_p(degree_displ)
checking$p
install.packages("devtools")
find_rtools()
find_rtools()
find_rtools()
find_rtools()
library(devtools)
find_rtools()
write_graph(csgraph, "PPI_Network.csv","edgelist")
library(igraph)
write_graph(csgraph, "PPI_Network.csv","edgelist")
csgraph %>% export_csv()
csgraph_export <- csgraph
V(csgraph_export)$id = V(csgraph_export)$name
write_graph(csgraph_export,"PPI_Network_1.csv","edgelist")
write_graph(csgraph_export,"PPI_Network_1.csv","ncol")
write_graph(csgraph,"PPI_Network_1.csv","ncol")
betwness
getwd()
source('~/MSCPROJECT/MScProject/PPI network/Bridgeness/Bridgeness.R')
getwd()
source('~/MSCPROJECT/MScProject/PPI network/Bridgeness/Bridgeness.R')
source('~/MSCPROJECT/MScProject/PPI network/Bridgeness/Bridgeness.R')
setwd(afs/inf.ed.ac.uk/user/s18/s1882216/MSCPROJECT/MScProject/PPI network/Bridgeness)
setwd('afs/inf.ed.ac.uk/user/s18/s1882216/MSCPROJECT/MScProject/PPI network/Bridgeness')
